import pygame
import math

def drawLineBetween(screen, start, end, width, color):
    dx = end[0] - start[0]
    dy = end[1] - start[1]
    dist = math.sqrt(dx**2 + dy**2)
    if dist == 0:
        return

    iterations = max(abs(dx), abs(dy))
    for i in range(iterations):
        progress = 1.0 * i / iterations
        aprogress = 1 - progress
        x = int(aprogress * start[0] + progress * end[0])
        y = int(aprogress * start[1] + progress * end[1])
        pygame.draw.circle(screen, color, (x, y), width)

def main():
    pygame.init()
    screen = pygame.display.set_mode((640, 480))
    clock = pygame.time.Clock()

    radius = 5 
    x, y = 0, 0
    mode = 'blue'
    draw_mode = 'line'

    points = []
    figures =[] 
    # Список для хранения фигур

    #кнопки
    buttons = {
        "Draw Rect": pygame.Rect(10, 10, 120, 40),
        "Draw Circle": pygame.Rect(140, 10, 120, 40),
        "Eraser": pygame.Rect(270, 10, 120, 40),
        "Color": pygame.Rect(400, 10, 120, 40)
    }

    start_pos = None  #позиция

    while True:
        pressed = pygame.key.get_pressed()
        alt_held = pressed[pygame.K_LALT] or pressed[pygame.K_RALT]
        ctrl_held = pressed[pygame.K_LCTRL] or pressed[pygame.K_RCTRL]

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_w and ctrl_held:
                    return
                if event.key == pygame.K_F4 and alt_held:
                    return
                if event.key == pygame.K_ESCAPE:
                    return

            if event.type == pygame.MOUSEBUTTONDOWN:
                x, y = event.pos

                # Проверка кнопок
                for btn_text, btn_rect in buttons.items():
                    if btn_rect.collidepoint(x, y):
                        if btn_text == "Color":
                            if mode == 'blue':
                                mode = 'red'

                            elif mode == 'red':
                                mode = 'green'

                            else:
                                mode = 'blue'

                        else:
                            draw_mode = btn_text.lower().replace(" ", "_")
                        break
                else:
                    start_pos = (x, y)
                    points = [start_pos]

            elif event.type == pygame.MOUSEBUTTONUP:
                if draw_mode == "draw_rect" and start_pos:
                    x, y = pygame.mouse.get_pos()
                    rect = pygame.Rect(*start_pos, x - start_pos[0], y - start_pos[1])
                    figures.append(("rect", rect))

                elif draw_mode == "draw_circle" and start_pos:
                    x, y = pygame.mouse.get_pos()
                    radius = max(abs(x - start_pos[0]), abs(y - start_pos[1])) // 2
                    center = ((x + start_pos[0]) // 2, (y + start_pos[1]) // 2)
                    figures.append(("circle", center, radius))

                elif draw_mode == "line" and len(points) > 1:
                    figures.append(("line", list(points), mode))
                    
                elif draw_mode == "eraser" and len(points) > 1:
                    figures.append(("line", list(points), "eraser")) 
                start_pos = None
                points = []

            elif event.type == pygame.MOUSEMOTION:
                if start_pos and draw_mode in ["line", "eraser"]:
                    points.append(event.pos)

        screen.fill((255, 255, 255))

        # кнопки
        for text, rect in buttons.items():
            pygame.draw.rect(screen, (200, 200, 200), rect)
            font = pygame.font.Font(None, 30)
            text_surf = font.render(text, True, (0, 0, 0))
            screen.blit(text_surf, (rect.x + 10, rect.y + 10))

        # Отрисовка сохраненных фигур
        for figure in figures:
            if figure[0] == "rect":
                pygame.draw.rect(screen, (0, 0, 0), figure[1], 2)
            elif figure[0] == "circle":
                pygame.draw.circle(screen, (0, 0, 0), figure[1], figure[2], 2)

            elif figure[0] == "line":
                line_points = figure[1]
                line_color_mode = figure[2]
                eraser_color = (255, 255, 255)
                draw_color_mode = "eraser" if line_color_mode == "eraser" else mode
                line_color = (0, 0, 0) 
                
                if line_color_mode == 'blue':
                    line_color = (0, 0, 255)
                elif line_color_mode == 'red':
                    line_color = (255, 0, 0)
                elif line_color_mode == 'green':
                    line_color = (0, 255, 0)
                elif line_color_mode == 'eraser':
                    line_color = eraser_color

                for i in range(len(line_points) - 1):
                    drawLineBetween(screen, line_points[i], line_points[i + 1], radius, line_color)

            draw_color = (0, 0, 0)
            eraser_color = (255, 255, 255)
            if mode == 'blue':
                draw_color = (0, 0, 255)
            elif mode == 'red':
                draw_color = (255, 0, 0)
            elif mode == 'green':
                draw_color = (0, 255, 0)

            current_color = eraser_color if draw_mode == "eraser" else draw_color
            for i in range(len(points) - 1):
                drawLineBetween(screen, points[i], points[i + 1], radius, current_color)



        if start_pos and draw_mode in ["draw_rect", "draw_circle"]:
            x, y = pygame.mouse.get_pos()
            if draw_mode == "draw_rect":
                rect = pygame.Rect(*start_pos, x - start_pos[0], y - start_pos[1])
                pygame.draw.rect(screen, (0, 0, 0), rect, 2)
            elif draw_mode == "draw_circle":
                radius = max(abs(x - start_pos[0]), abs(y - start_pos[1])) // 2
                center = ((x + start_pos[0]) // 2, (y + start_pos[1]) // 2)
                pygame.draw.circle(screen, (0, 0, 0), center, radius, 2)

        pygame.display.flip()
        clock.tick(60)

main()