import pygame
import random
import time  # Для отслеживания времени исчезновения еды

# Colors
blue = (50, 153, 213)
black = (0, 0, 0)
red = (213, 50, 80)
white = (255, 255, 255)
green = (0, 255, 0)   # зеленый для большой еды
yellow = (255, 255, 0) # желтый для исчезающей еды

# screen
width = 600
height = 400
snake_block = 10

# open pygame
pygame.init()
display = pygame.display.set_mode((width, height))
pygame.display.set_caption('Snake Game')
clock = pygame.time.Clock()

# count score and level
score = 0
level = 1
speed = 10  # speed snake

# walls
walls = [(x, 0) for x in range(0, width, snake_block)] + [(x, height - snake_block) for x in range(0, width, snake_block)]
walls += [(0, y) for y in range(0, height, snake_block)] + [(width - snake_block, y) for y in range(0, height, snake_block)]

# для генерации еды
def generate_food(snake_list, current_walls):
    while True:
        food_x = random.randint(0, (width // snake_block) - 1) * snake_block
        food_y = random.randint(0, (height // snake_block) - 1) * snake_block
        food_pos = (food_x, food_y)
        if food_pos not in snake_list and food_pos not in current_walls:
            # Randomly choose the type of food
            food_type = random.choices(['normal', 'big', 'disappearing'], weights=[0.7, 0.2, 0.1], k=1)[0]
            food_data = {'position': food_pos, 'type': food_type}
            if food_type == 'disappearing':
                food_data['spawn_time'] = time.time() # время
            return food_data

def main():
    global score, level, speed
    game_over = False
    x1 = width / 2
    y1 = height / 2

    x1_change = 0
    y1_change = 0

    snake_list = []
    length = 1
    food = generate_food(snake_list, walls) # Generate the first food

    while not game_over:
        display.fill(blue)

        # game start
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and x1_change == 0:
                    x1_change = -snake_block
                    y1_change = 0
                elif event.key == pygame.K_RIGHT and x1_change == 0:
                    x1_change = snake_block
                    y1_change = 0
                elif event.key == pygame.K_UP and y1_change == 0:
                    y1_change = -snake_block
                    x1_change = 0
                elif event.key == pygame.K_DOWN and y1_change == 0:
                    y1_change = snake_block
                    x1_change = 0

        x1 += x1_change
        y1 += y1_change

        # Check for collision with walls
        if (x1, y1) in walls or x1 < 0 or x1 >= width or y1 < 0 or y1 >= height:
            game_over = True

        # Draw walls
        for wall in walls:
            pygame.draw.rect(display, black, [wall[0], wall[1], snake_block, snake_block])

        # Draw food based on its type
        if food['type'] == 'normal':
            pygame.draw.rect(display, red, [food['position'][0], food['position'][1], snake_block, snake_block])
        elif food['type'] == 'big':
            pygame.draw.rect(display, green, [food['position'][0], food['position'][1], snake_block, snake_block])
        elif food['type'] == 'disappearing':
            
            if time.time() - food['spawn_time'] > 5 :
                food = generate_food(snake_list, walls) # Generate new food if it disappeared
            else:
                pygame.draw.rect(display, yellow, [food['position'][0], food['position'][1], snake_block, snake_block])

        # Snake mechanics
        snake_head = [x1, y1]
        snake_list.append(snake_head)
        if len(snake_list) > length:
            del snake_list[0]

        # Check for self-collision
        if snake_head in snake_list[:-1]:
            game_over = True

        # Draw snake
        print_snake(snake_block, snake_list)

        # Check if food is eaten
        if (x1, y1) == food['position']:
            if food['type'] == 'normal':
                length += 1
                score += 1
            elif food['type'] == 'big':
                length += 3
                score += 3
            elif food['type'] == 'disappearing':
                length += 5 # Увеличиваем награду за съеденную исчезающую еду
                score += 5
            food = generate_food(snake_list, walls) # Generate new food

            # Increase level and speed every 3 points
            if score % 3 == 0:
                level += 1
                speed += 2

        # Display score and level
        font = pygame.font.SysFont(None, 30)
        score_text = font.render(f"Score: {score}", True, white)
        level_text = font.render(f"Level: {level}", True, white)
        display.blit(score_text, (10, 10))
        display.blit(level_text, (10, 40))

        pygame.display.update()
        clock.tick(speed)

    pygame.quit()

def print_snake(snake_block, snake_list):
    for segment in snake_list:
        pygame.draw.rect(display, black, [segment[0], segment[1], snake_block, snake_block])

if __name__ == '__main__':
    main()